#include <stdio.h>
#include <stdlib.h>

// Structure for an item
typedef struct {
    int value;
    int weight;
    float ratio;
} Item;

// Comparison function to sort items by value-to-weight ratio in descending order
int compare(const void* a, const void* b) {
    Item* item1 = (Item*)a;
    Item* item2 = (Item*)b;
    if (item2->ratio > item1->ratio) return 1;
    else if (item2->ratio < item1->ratio) return -1;
    else return 0;
}

// Greedy Knapsack function
float greedyKnapsack(Item items[], int n, int capacity) {
    qsort(items, n, sizeof(Item), compare); // Sort items by ratio

    float totalValue = 0.0;
    int currentWeight = 0;

    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            // Take full item
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // Take fraction of the item
            int remaining = capacity - currentWeight;
            totalValue += items[i].ratio * remaining;
            break; // Knapsack is full
        }
    }

    return totalValue;
}

int main() {
    int n, capacity;
    printf("Enter number of items: ");
    scanf("%d", &n);

    Item items[n];
    printf("Enter value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d:\n", i + 1);
        printf("  Value: ");
        scanf("%d", &items[i].value);
        printf("  Weight: ");
        scanf("%d", &items[i].weight);
        items[i].ratio = (float)items[i].value / items[i].weight;
    }

    printf("Enter knapsack capacity: ");
    scanf("%d", &capacity);

    float maxValue = greedyKnapsack(items, n, capacity);
    printf("Maximum value in knapsack = %.2f\n", maxValue);

    return 0;
}
