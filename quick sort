#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function (pivot = first element)
int partition(int arr[], int low, int high) {
    int pivot = arr[low];  // first element as pivot
    int i = low + 1;
    int j = high;

    while (1) {
        // Move i to the right until an element > pivot is found
        while (i <= high && arr[i] <= pivot) {
            i++;
        }

        // Move j to the left until an element < pivot is found
        while (j >= low && arr[j] > pivot) {
            j--;
        }

        // If pointers cross, break
        if (i > j) {
            break;
        }

        // Swap elements at i and j
        swap(&arr[i], &arr[j]);
    }

    // Place pivot at its correct position
    swap(&arr[low], &arr[j]);

    return j;
}

// QuickSort function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        // Recursive calls
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Main function
int main() {
    int n;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Original array: ");
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}
